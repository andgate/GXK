{-# LANGUAGE RankNTypes #-}
{-# LANGUAGE MultiParamTypeClasses #-}
module Gx.Internal.Backend.Types
  ( module Gx.Internal.Backend.Types
  , module Gx.Data.Window
  )
where


import Gx.Data.Window
import qualified Gx.Data.Input as I

import Control.Monad.IO.Class (MonadIO)
import Control.Monad.State.Class (MonadState)
import Linear

-- | The functions every backend window managed backend needs to support.
--
--   The Backend module interfaces with the window manager, and handles opening
--   and closing the window, and managing key events etc.
--
--   It doesn't know anything about drawing lines or setting colors.
--   When we get a display callback, Vish will perform OpenGL actions, and
--   the backend needs to have OpenGL in a state where it's able to accept them.
--
class (MonadIO m) => Backend m where
        -- | Perform any initialization that needs to happen before opening a window
        --   The Boolean flag indicates if any debug information should be printed to
        --   the terminal
        initializeBackend          :: Bool -> m ()

        -- | Perform any deinitialization and close the backend.
        exitBackend                :: m ()

        -- | Open a window with the given display mode.
        openWindow                 :: Window -> m ()

        -- | Dump information about the backend to the terminal.
        dumpBackendState           :: m ()

        -- | Install the display callbacks.
        installCallbacks           :: Callbacks -> m ()

        -- | The mainloop of the backend.
        runMainLoop                :: m ()

        -- | Function that returns (width,height) of the window in pixels.
        getWindowDimensions        :: m (Maybe (V2 Int))

        -- | Function that reports the time elapsed since the application started.
        --   (in seconds)
        elapsedTime                :: m Double

        -- | Function that puts the current thread to sleep for 'n' seconds.
        sleep                      :: Double -> m ()

data InputState = Up | Down

class ConvBackend a b where
  fromBackend :: a -> b

instance ConvBackend InputState I.InputState where
  fromBackend inputState =
    case inputState of
      Up -> I.Up
      Down -> I.Down


-- The callbacks should work for all backends. We pass a reference to the
-- backend state so that the callbacks have access to the class dictionary and
-- can thus call the appropriate backend functions.

-- | Display callback has no arguments.
type DisplayCallback       = forall m. Backend m => m ()

-- | App pause callback has no arguments.
type PauseCallback       = forall m. Backend m => m ()

-- | App resume callback has no argument.
type ResumeCallback      = forall m. Backend m => m ()

-- | Close callback has no arguments.
type CloseCallBack         = forall m. Backend m => m ()

-- | Arguments: (Width,Height) in pixels.
type ReshapeCallback       = forall m. Backend m => V2 Int -> m ()

-- | Arguments: KeyType, Key Up \/ Down, Ctrl \/ Alt \/ Shift pressed
type KeyboardCallback = forall m. Backend m => I.Key -> InputState -> m ()

-- | Arguments: (PosX,PosY) in pixels.
type MouseMoveCallback        = forall m. Backend m => V2 Double -> m ()

-- | Arguments: Mouse button, Key Up \/ Down, Ctrl \/ Alt \/ Shift pressed, latest mouse location.
type MouseButtonCallback = forall m. Backend m => I.MouseButton -> InputState -> V2 Double -> m ()

-- | Arguments: (ScrollX, ScrollY)
type ScrollCallback = forall m. Backend m => V2 Double -> m ()

data Callbacks = Callbacks
  { displayCallback :: DisplayCallback
  , pauseCallback :: PauseCallback
  , resumeCallback :: ResumeCallback
  , closeCallback :: CloseCallBack
  , reshapeCallback :: ReshapeCallback
  , keyboardCallback :: KeyboardCallback
  , mouseMoveCallback :: MouseMoveCallback
  , mouseButtonCallback :: MouseButtonCallback
  , scrollCallback :: ScrollCallback
  }

defaultCallbacks :: Callbacks
defaultCallbacks =
  Callbacks
  { displayCallback     = defaultDisplayCallback
  , pauseCallback       = defaultPauseCallback
  , resumeCallback      = defaultResumeCallback
  , closeCallback       = defaultCloseCallback
  , reshapeCallback     = defaultReshapeCallback
  , keyboardCallback    = defaultKeyboardCallback
  , mouseMoveCallback   = defaultMouseMoveCallback
  , mouseButtonCallback = defaultMouseButtonCallback
  , scrollCallback      = defaultScrollCallback
  }

defaultDisplayCallback :: DisplayCallback
defaultDisplayCallback = return ()

defaultPauseCallback :: PauseCallback
defaultPauseCallback = return ()

defaultResumeCallback :: ResumeCallback
defaultResumeCallback = return ()

defaultCloseCallback :: CloseCallBack
defaultCloseCallback = return ()

defaultReshapeCallback :: ReshapeCallback
defaultReshapeCallback _ = return ()

defaultKeyboardCallback :: KeyboardCallback
defaultKeyboardCallback _ _ = return ()

defaultMouseMoveCallback :: MouseMoveCallback
defaultMouseMoveCallback _ = return ()

defaultMouseButtonCallback :: MouseButtonCallback
defaultMouseButtonCallback _ _ _ = return ()

defaultScrollCallback :: ScrollCallback
defaultScrollCallback _  = return ()
